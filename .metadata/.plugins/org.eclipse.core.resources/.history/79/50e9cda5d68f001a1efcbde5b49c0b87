package com.roots.cacaopay.transaccion.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.roots.cacaopay.catalogos.entity.TipoTransaccion;
import com.roots.cacaopay.commons.controllers.CommonController;
import com.roots.cacaopay.transaccion.clients.Rest;
import com.roots.cacaopay.transaccion.entity.Cuenta;
import com.roots.cacaopay.transaccion.entity.DefinicionCuenta;
import com.roots.cacaopay.transaccion.entity.RelacionCuenta;
import com.roots.cacaopay.transaccion.entity.TransaccionCuenta;
import com.roots.cacaopay.transaccion.service.CuentaService;
import com.roots.cacaopay.transaccion.service.RelacionCuentaService;
import com.roots.cacaopay.transaccion.service.TransaccionCuentaService;

@RestController
@RequestMapping("/cuenta")
public class CuentaController extends CommonController<Cuenta, CuentaService> {

	@Autowired
	private Rest restCliente;
	
	@Autowired
	private RelacionCuentaService rcuentaService;
	
	@Autowired
	private TransaccionCuentaService tcuentaService;

	@PutMapping("/sumar/{id}")
	public ResponseEntity<?> sumarSaldo(@Valid @RequestBody Cuenta cuenta, @PathVariable Long id){
		Optional<Cuenta> cuentaS = this.service.findById(id);
		cuentaS.get().setSaldo(cuenta.getSaldo());
		this.service.save(cuentaS.get());
		return ResponseEntity.ok(cuentaS);
	}
	
	@PostMapping("/definicion-cuenta/{id}")
	public ResponseEntity<?> agregarDefinicionCuenta(@Valid @RequestBody Cuenta cuenta, @PathVariable Long id){
		DefinicionCuenta definicionExist = restCliente.findByIdDefinicionCuenta(id);
		
		if(definicionExist == null) {
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNew = cuenta;
		cuentaNew.setNumero(cuenta.getNumero());
		cuentaNew.setCorrelativooperaciones( 1 );
		cuentaNew.setDcuenta(definicionExist);

		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.save(this.service.save(cuentaNew)));
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> editar(@Valid @RequestBody Cuenta cuenta, @PathVariable Long id){
		Optional<Cuenta> cuentaExists = this.service.findById(id);
		
		if(!cuentaExists.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNew = cuentaExists.get();
		cuentaNew.setNumero(cuenta.getNumero());
		cuentaNew.setCorrelativooperaciones( (cuentaNew.getCorrelativooperaciones() + 1) );

		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.save(this.service.save(cuentaNew)));
	}

	@PutMapping("/cambiar-estado/{id}")
	public ResponseEntity<?> cambiarEstado(@Valid @RequestBody Cuenta cuenta, @PathVariable Long id){
		Optional<Cuenta> cuentaExists = this.service.findById(id);
		
		if(!cuentaExists.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNew = cuentaExists.get();
		cuentaNew.setEstado(cuenta.getEstado());

		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.save(this.service.save(cuentaNew)));
	}

	@PutMapping("/enviar/{cuentade}/{cuentapara}/{tipoenvio}/{tiporecibo}")
	public ResponseEntity<?> sumarMonto(
			@Valid @RequestBody Cuenta cuenta,
			@PathVariable Long cuentade,
			@PathVariable Long cuentapara,
			@PathVariable Long tipoenvio,
			@PathVariable Long tiporecibo){

		Optional<Cuenta> cuentaExists = this.service.findById(cuentade);
		HashMap<String, String> errs = new HashMap<>(); 
		errs.put("errs", "La suma de abono, sobre pasa el limite permitido al tipo de cuenta");
		errs.put("code", "409");
		
		if(!cuentaExists.isPresent()) {	
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNew = cuentaExists.get();
		
		if(cuentaNew.getDcuenta().getMaximosaldo() < (cuentaNew.getSaldo() + cuenta.getSaldo())) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body(errs);
		}
		
		cuentaNew.setSaldo( new BigDecimal(cuentaNew.getSaldo() + cuenta.getSaldo())
				.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue() );
		cuentaNew.setCorrelativooperaciones( (cuentaNew.getCorrelativooperaciones() + 1) );

		Optional<Cuenta> cuentaExist = this.service.findById(cuentapara);
		HashMap<String, String> err = new HashMap<>(); 
		errs.put("errs", "No se cuenta con suficientes fondos para la transaccion");
		errs.put("code", "409");
		
		if(!cuentaExist.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNews = cuentaExist.get();
		
		if(cuentaNews.getSaldo() < cuenta.getSaldo()) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body(err);
		}
		cuentaNew.setSaldo(new BigDecimal(cuentaNews.getSaldo() - cuenta.getSaldo())
				.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
		cuentaNew.setCorrelativooperaciones( (cuentaNews.getCorrelativooperaciones() + 1) );
		
		RelacionCuenta rCuentae = rcuentaService.findByCuenta(cuentaExists.get());
		RelacionCuenta rCuentar = rcuentaService.findByCuenta(cuentaExist.get());

		TipoTransaccion te = restCliente.findByIdTipo(tipoenvio);
		TipoTransaccion tr = restCliente.findByIdTipo(tiporecibo);
		
		TransaccionCuenta tc = new TransaccionCuenta();
		tc.setUsuariode(rCuentae.getUsuario());
		tc.setUsuariopara(rCuentar.getUsuario());
		tc.setTipotransaccionenvio(te);
		tc.setTipotransaccionrecibo(tr);
		tc.setMonto(new BigDecimal(cuenta.getSaldo())
				.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
		tc.setReferencia("132654");
		
		tcuentaService.save(tc);
		
		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.save(cuentaNew));
	}
	
	@PutMapping("/restar-monto/{id}")
	public ResponseEntity<?> restarMonto(@Valid @RequestBody Cuenta cuenta, @PathVariable Long id){
		Optional<Cuenta> cuentaExists = this.service.findById(id);
		HashMap<String, String> errs = new HashMap<>(); 
		errs.put("errs", "No se cuenta con suficientes fondos para la transaccion");
		errs.put("code", "409");
		
		if(!cuentaExists.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		Cuenta cuentaNew = cuentaExists.get();
		
		if(cuentaNew.getSaldo() < cuenta.getSaldo()) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body(errs);
		}
		cuentaNew.setSaldo(new BigDecimal(cuentaNew.getSaldo() - cuenta.getSaldo())
				.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
		cuentaNew.setCorrelativooperaciones( (cuentaNew.getCorrelativooperaciones() + 1) );

		return ResponseEntity.status(HttpStatus.CREATED).body(this.service.save(cuentaNew));
	}
}